# coding: utf-8

"""
    Mux API

    Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: devex@mux.com
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from mux_python.configuration import Configuration


class BreakdownValue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'views': 'int',
        'value': 'float',
        'total_watch_time': 'int',
        'negative_impact': 'int',
        'field': 'str'
    }

    attribute_map = {
        'views': 'views',
        'value': 'value',
        'total_watch_time': 'total_watch_time',
        'negative_impact': 'negative_impact',
        'field': 'field'
    }

    def __init__(self, views=None, value=None, total_watch_time=None, negative_impact=None, field=None, local_vars_configuration=None):  # noqa: E501
        """BreakdownValue - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._views = None
        self._value = None
        self._total_watch_time = None
        self._negative_impact = None
        self._field = None
        self.discriminator = None

        if views is not None:
            self.views = views
        if value is not None:
            self.value = value
        if total_watch_time is not None:
            self.total_watch_time = total_watch_time
        if negative_impact is not None:
            self.negative_impact = negative_impact
        if field is not None:
            self.field = field

    @property
    def views(self):
        """Gets the views of this BreakdownValue.  # noqa: E501


        :return: The views of this BreakdownValue.  # noqa: E501
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this BreakdownValue.


        :param views: The views of this BreakdownValue.  # noqa: E501
        :type views: int
        """

        self._views = views

    @property
    def value(self):
        """Gets the value of this BreakdownValue.  # noqa: E501


        :return: The value of this BreakdownValue.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this BreakdownValue.


        :param value: The value of this BreakdownValue.  # noqa: E501
        :type value: float
        """

        self._value = value

    @property
    def total_watch_time(self):
        """Gets the total_watch_time of this BreakdownValue.  # noqa: E501


        :return: The total_watch_time of this BreakdownValue.  # noqa: E501
        :rtype: int
        """
        return self._total_watch_time

    @total_watch_time.setter
    def total_watch_time(self, total_watch_time):
        """Sets the total_watch_time of this BreakdownValue.


        :param total_watch_time: The total_watch_time of this BreakdownValue.  # noqa: E501
        :type total_watch_time: int
        """

        self._total_watch_time = total_watch_time

    @property
    def negative_impact(self):
        """Gets the negative_impact of this BreakdownValue.  # noqa: E501


        :return: The negative_impact of this BreakdownValue.  # noqa: E501
        :rtype: int
        """
        return self._negative_impact

    @negative_impact.setter
    def negative_impact(self, negative_impact):
        """Sets the negative_impact of this BreakdownValue.


        :param negative_impact: The negative_impact of this BreakdownValue.  # noqa: E501
        :type negative_impact: int
        """

        self._negative_impact = negative_impact

    @property
    def field(self):
        """Gets the field of this BreakdownValue.  # noqa: E501


        :return: The field of this BreakdownValue.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this BreakdownValue.


        :param field: The field of this BreakdownValue.  # noqa: E501
        :type field: str
        """

        self._field = field

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BreakdownValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BreakdownValue):
            return True

        return self.to_dict() != other.to_dict()
